Примеры кода C#

- типы значений копируются при передачи их, а ссылочные (классы, массивы, пр.) передаются как ссылка
- ссылочным типам можно указывать значение null
- много кратное использование + для соединения строк, считается неэфективным для етого используют System.Text.StringBuilder
- можно делать сколько хочеш вложеностией деректив using главное не запутатся
- внешние псевдонимы extern alias NNN помогают если две разных библиотеки имеют одинаковый namespace и одинаковые поля, если подключить программе такую дериктиву то программа запутается
- статический класс, указывает на то что все члены его будут статические и такой класс нельзя создать и унаследовать
- каждый обьект имеет метод toString() который можно переопределить для своих созданных типов
- структура не является ссылочным типом, хоть и частично похожа на класс

- чтобы назвать переменную зарезервированным словом, перед ее именем ставим @
    int @int = 0;
- чтобы отключить все спец символы в строке перед ней ставим @
    string str = @"это строка\nне разделена";
- чтобы писать много строчный текст в коде без конкатенаций (+) вначале ставим +
    string test = @"эта строка
        разрезана";

- чтобы в строку можно было вставить переменную вначале ставим $ а переменную внутрь {} интерполяция
    int value = 100;
    string str = $"переменная value равна {value}";
    *** после value можно указывать формат
        string str = $"переменная value равна {value:X2}";

- инициализация одномерных массивов:
    1. char[] ch_1 = new char[5];
        ch_1[0] = 'a';
        ch_1[1] = 'b';
        ch_1[2] = 'c';
        ch_1[3] = 'd';
        ch_1[4] = 'e';
    2. char[] ch_1 = new char[] { 'a', 'b', 'c', 'd', 'e' };
    3. char[] ch_1 = { 'a', 'b', 'c', 'd', 'e' };
    4. var ch_1 = new char[] { 'a', 'b', 'c', 'd', 'e' };

- инициализация многомерных прямоугольных массивов
    1. int[,] matrix = new int[3, 3];
        matrix[0, 0] = 1;
        matrix[0, 1] = 2;
        matrix[0, 2] = 3;
        matrix[1, 0] = 4;
        matrix[1, 1] = 5:
        matrix[1, 2] = 6:
        matrix[2, 0] = 7:
        matrix[2, 1] = 8:
        matrix[2, 2] = 8:
    2. int[,] matrix = new int[,] {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }};
    3. var matrix = new int[,] {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }};
    4. int[,] matrix_3 = {
            { 1, 2, 3 },
            { 4, 5, 6 },
            { 7, 8, 9 }};

- инициализация многомерных зубчатых массивов
    1. int[][] matrix = new int[4][];
        matrix[0] = new int[] { 1 };
        matrix[1] = new int[] { 2, 3 };
        matrix[2] = new int[] { };
        matrix[3] = new int[] { 4, 5, 6, 7, 8, 9 };
    2. int[][] matrix = new int[][] {
            new int[] { 1 },
            new int[] { 2, 3 },
            new int[] { },
            new int[] { 4, 5, 6, 7, 8, 9 }};
    3. int[][] matrix = {
            new int[] { 1 },
            new int[] { 2, 3 },
            new int[] { },
            new int[] { 4, 5, 6, 7, 8, 9 }};
    4. var matrix = new int[][] {
            new int[] { 1 },
            new int[] { 2, 3 },
            new int[] { },
            new int[] { 4, 5, 6, 7, 8, 9 }};

- модификатор ref позволяет передать значение по ссылке, т.е.
    int a = 100;
    Test(ref a);
    Debug.Log(a);// 10000;

    private void Test(ref int a) {
        a = a * a;
        }

- модификатор out позволяет вернуть значение из метода в указанную переменную
    Test(out int a);// создаст переменную a
    Debug.Log(a);// 100

    private void Test(out int a) {
        a = 10;
        a = a * a;
        }

- в метод можно передать массив, указав params? но он должен быть в конце остальных параметров
    Debug.Log(Summa(2, 4, 6, 8, 10, 12));

    private int Summa(params int[] arrs) {
        int sum = 0;

        for (int i = 0; i < arrs.Length; i++)
            sum += arrs[i];

        return sum;
        }

- в методе можно явно указать имя переменной
    Debug.Log(Summa(x: 10, y: 20));

    private int Summa(int x, int y) => x + y;

- null оператор ??
    string s1 = null;
    string s2 = s1 ?? ""; аналогично string s2 = (s1 == null) ? "" : s1;

- оператор ? помогает если обьекта не существует а мы пытаемся вызвать его метод
    List<int> lists = null;
    lists?.Add();// не вызовется и не будет ошибки

- ограничение переменной, пример в методе Start (не обязательно)
    private void Start {
        ...
            {
            int x = 100;
            }

            {
            int x = 100;// конфликта не будет
            }
        ...
        }

- упрощение оператора switch
    public int Num(int i) {
        switch(i) {
            case 1: return 1;
            case 2: return 4;
            case 3: return 9;
            case 4: return 16;
            case 5: return 25;
            default: return 0;
            }
        }
    эквивалентно
    public int Num(int num) => num switch {
        1 => 1,
        2 => 4,
        3 => 9,
        4 => 16,
        5 => 25,
        _ => 0
        };

- помимо break и return в switch есть и goto
    ...
    case 1: goto default;
    case 2: goto case 1;
    ...

- c помощью using можно перезагрузить тип данных с новым именем
    using V3 = UnityEngine.Vector3;
    ...
    var vector3 = new V3(); аналог var vector3 = new Vector3();

- можно вызывать конструктор собственного класса
    public class Test() {
        public int x, y;

        public Test(int x, int y) {
            this.x = x;
            this.y = y;
            }

        public Test() : this(0, 0) {

            }

        }

- у статических классаов есть свой конструктор
    public static Test {

        static Test() {

            }
        }

- у каждого класса есть свой деструктор, вызывается при удалении обьекта сборщиком мусора
    public class Test() {

        ~Test() {

            }        

        }

- классы можно разделять при помощи модификатора partial не знаю зачем это нужно

- nameof позволяет вывести имя поля
    string str = "";
    Debug.Log(nameof(str));// str

- для работы с классами существует два модификатора as и is

- чтобы наследуемы класс в принудительном порядке унаследовал от абстрактного класса и методы
    public abstract class Enemy {
        public abstract void Test();
        }

    public class Worm : Enemy {
        public override void Test() {

            }
        }

- немного о структурах
    - если есть конструктор, то в нем обязательно должны быть проинициализированы все поля структуры
    - нельзя переопределять конструктор без параметров, даже если 1 правило выполнено
    - перегрузить конструктор можно, если параметры не совпадают по типам
    - инициализировать поля за пределами конструктора, запрещено

- typeof позволяет узнать тип данных
    Debug.Log(typeof(Vector2));// UnityEngine.Vector2
    Debug.Log(typeof(Vector2).Name);// Vector2
    Debug.Log(typeof(Vector2).FullName);// UnityEngine.Vector2

- GetType() позволяет узнать тип данных для поля
    int i = 100;
    Debug.Log(i.GetType());// System.Int32
    Debug.Log(i.GetType().Name);// Int32
    Debug.Log(i.GetType().FullName);// System.Int32

- можно сравнить поле с типом данных
    var v = new Vector2();
    Debug.Log(v.GetType() == typeof(Vector2));// true

- чтобы поменять местами значения переменных, можно использовать кортеж (a, b) = (b, a);
    int a = 111, b = 222;
    (a, b) = (b, a);

- внутри методов можно создавать методы
    public void SomeMethod() {
        static int mysqrt(int x) => x * x;

        int a = 7;
        static int test(int b) => b * a;// она видит переменную a

        Debug.Log(mysqrt(10));
        }

- чтобы значимый тип мог получить значение null испульзуем ?
    int? a = null;
    т.к. оно неявно преобразуется в
    var a = new int?();// старый вариант new Nullable<int>();

- директивы в c#
    #define - определяет символ
    #undef - отменяет определение символа
    #if символ [операция]
    #else
    #elif символ [операция]
    #endif
    #warning текст - заставляет компилятор вывести предупреждение  с текстом текст
    #error текст - заставляет компилятор вывести ошибку с текстом текст
    #pragma warning [disable | restore] отключит или востановит компилятором предупреждение
    #line [номер ["файл"] | hidden] - Номер задает строку в исходном коде; в "файл"
        указывается имя файла для помещения в вывод
        компилятора; hidden инструктирует инструменты
        отладки о необходимости пропуска кода от этой
        точки до следующей директивы #line
    #region имя - обозначает начало раздела
    #endregion - обозначает конец региона

- имя активной сцены:
    SceneManager.GetActiveScene().name;

- понижение FPS
    Application.targetFrameRate = 10;// -1 неограниченное FPS

- при реализации движения персонажа, может возникнуть ошибка: 
    чтобы персонаж двигался одинаково как по горизонтали и вертикали так и по диагонали, нормализируем вектор направления
        Vector3 direction = Vector3.zero;// направление движения игрока

        if (Input.GetKey(KeyCode.D))
            direction.x = 1;
        else if (Input.GetKey(KeyCode.A))
            direction.x = -1;

        if (Input.GetKey(KeyCode.W))
            direction.y = 1;
        else if (Input.GetKey(KeyCode.S))
            direction.y = -1;

        transform.position += _speed * Time.deltaTime * direction.normalized;

- в Update нельзя использовать одни и теже GetComponent, Find или обращатся к камере Camera.main
    лучше все кешировать, по возможности

- чтобы можно было отобразить в редакторе Класс с данными, ставим [Serializable]